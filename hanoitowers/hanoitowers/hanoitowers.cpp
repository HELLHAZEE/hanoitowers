/*Эта задача написана по легенде:

В одном из монастырей Дальнего Востока сонахи пытались переместить стопку дисков с одного колышка на другой.
Начальная стопка имела 64 диска, нанизанных на один колышек так, что их размеры последовательно уменьшались к вершине.
Монахи пытались переместить эту стопку с этого колышка на второй при уславиии, что при каждом перемещении можно брать
только один диск и больший диск никогда не должен находиться над меньшим диском.
Третий колышек предоставляет возможность временного размещения дисков.
Считают, что когда монахи решат свою задачу, наступит конец света.*/


/*Напишите программу решения задачи о Ханойских башнях. Используйте рекурсивную функцию с четырьмя параметрами:
1. Количество дисков, которое должно быть перемещено.
2. Колышек, на который эти диски нанизаны первоначально.
3. Колышек, на который этиа группа дисков должна быть перемещена.
4. Колышек, используемый как место временного размещения.
Ваша программа должна печатать четкие инструкции, что нужно делать для премещения дисков с начального колышка на конечный.
Например, чтобы передвигать группу из трех дисков с колышка 1 на колышек 3,
ваша программа должна напечатать следующую последовательность перемещений*/

#include <iostream>

using namespace std;

void hanoi_towers(int quantity, int from, int to, int buf_peg)
//quantity-число колец, from-начальное положение колец(1-3),to-конечное положение колец(1-3)
{//buf_peg - промежуточный колышек(1-3)
	if (quantity != 0)
	{
		hanoi_towers(quantity - 1, from, buf_peg, to);

		cout << from << " -> " << to << endl;

		hanoi_towers(quantity - 1, buf_peg, to, from);
	}
}

int main()
{
	setlocale(LC_ALL, "rus");
	int start_peg, destination_peg, buffer_peg, plate_quantity;
	cout << "Номер первого столбика:" << endl;
	cin >> start_peg;
	cout << "Номер конечного столбика:" << endl;
	cin >> destination_peg;
	cout << "Номер промежуточного столбика:" << endl;
	cin >> buffer_peg;
	cout << "Количество дисков:" << endl;
	cin >> plate_quantity;

	hanoi_towers(plate_quantity, start_peg, destination_peg, buffer_peg);
	return 0;
}